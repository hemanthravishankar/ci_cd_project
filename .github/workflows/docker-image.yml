name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04 
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build an image from Dockerfile
        run: |
          cd notes-app-cicd-main
          docker build -t docker.io/hemanthravishankar/notepad:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/hemanthravishankar/notepad:${{ github.sha }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH'
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/hemanthravishankar/notepad:${{ github.sha }}'
          format: 'table'
          exit-code: 1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
      - name: push an image to Docker hub
        run: |
          docker push docker.io/hemanthravishankar/notepad:${{ github.sha }}
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
           token: ${{ secrets.PAT }}
           repository: ${{ github.actor }}/argocd-node-app-config
           event-type: new-image
           client-payload: 'docker.io/hemanthravishankar/notepad:${{ github.sha }}'
           
           
           
           
           
           
           
      - name: update the image version in Deploymen.yaml
        run:  |
          cd kube_all_files
          sed -i 's|image:.*|image: docker.io/hemanthravishankar/notepad:${{ github.sha }}|g' deployment.yaml
          
      # Run kube-linter to check fault in k8s file
      #This prepares directory where github/codeql-action/upload-sarif@v1 looks up report files by default.
      - name: Create ../results directory for SARIF report files
        shell: bash
        run: mkdir -p ../results

      - name: Scan yaml files with kube-linter
        uses: stackrox/kube-linter-action@v1.0.4
        id: kube-linter-action-scan
        with:
          # Adjust this directory to the location where your kubernetes resources and helm charts are located.
          directory: kube_all_files
          # Adjust this to the location of kube-linter config you're using, or remove the setting if you'd like to use
          # the default config.
          # config: sample/.kube-linter-config.yaml
          # The following two settings make kube-linter produce scan analysis in SARIF format which would then be
          # made available in GitHub UI via upload-sarif action below.
          format: sarif
          output-file: ../results/kube-linter.sarif
        # The following line prevents aborting the workflow immediately in case your files fail kube-linter checks.
        # This allows the following upload-sarif action to still upload the results to your GitHub repo.
        continue-on-error: true

      - name: Upload SARIF report files to GitHub
        uses: github/codeql-action/upload-sarif@v1

      # Ensure the workflow eventually fails if files did not pass kube-linter checks.
      - name: Verify kube-linter-action succeeded
        shell: bash
        run: |
          echo "If this step fails, kube-linter found issues. Check the output of the scan step above."
          [[ "${{ steps.kube-linter-action-scan.outcome }}" == "success" ]]
          
